// @generated by Peggy 4.0.3.
//
// https://peggyjs.org/

"use strict";


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Program: peg$parseProgram };
  var peg$startRuleFunction = peg$parseProgram;

  var peg$c0 = "(";
  var peg$c1 = ")";
  var peg$c2 = "'";
  var peg$c3 = "\"";
  var peg$c4 = "'(";
  var peg$c5 = "[";
  var peg$c6 = "|";
  var peg$c7 = "]";
  var peg$c8 = ",";
  var peg$c9 = "{";
  var peg$c10 = "}";
  var peg$c11 = ":";
  var peg$c12 = "[]";
  var peg$c13 = "&";
  var peg$c14 = "<";
  var peg$c15 = ">";
  var peg$c16 = ".";
  var peg$c17 = "|>";
  var peg$c18 = "<|";
  var peg$c19 = "in";
  var peg$c20 = "out";
  var peg$c21 = "finally";
  var peg$c22 = "_";
  var peg$c23 = "'\"";
  var peg$c24 = "\\";
  var peg$c25 = "b";
  var peg$c26 = "f";
  var peg$c27 = "n";
  var peg$c28 = "r";
  var peg$c29 = "t";
  var peg$c30 = "u";
  var peg$c31 = "0";
  var peg$c32 = "0b";
  var peg$c33 = "0x";
  var peg$c34 = "/";
  var peg$c35 = "e";
  var peg$c36 = ";";
  var peg$c37 = ";@";
  var peg$c38 = "attr";
  var peg$c39 = "perf";
  var peg$c40 = "lint";
  var peg$c41 = "link";
  var peg$c42 = "warn";
  var peg$c43 = "def";
  var peg$c44 = "if";
  var peg$c45 = "match";
  var peg$c46 = "while";
  var peg$c47 = "for";
  var peg$c48 = "cond";
  var peg$c49 = "when";
  var peg$c50 = "catch";
  var peg$c51 = "try";
  var peg$c52 = "await";
  var peg$c53 = "async";
  var peg$c54 = "definterface";
  var peg$c55 = "defclass";
  var peg$c56 = "deftype";
  var peg$c57 = "defenum";
  var peg$c58 = "defmacro";
  var peg$c59 = "defstruct";
  var peg$c60 = "deftrait";
  var peg$c61 = "fn";
  var peg$c62 = "let";
  var peg$c63 = "mut";
  var peg$c64 = "keyof";
  var peg$c65 = "import";
  var peg$c66 = "export";
  var peg$c67 = "from";
  var peg$c68 = "true";
  var peg$c69 = "#t";
  var peg$c70 = "false";
  var peg$c71 = "#f";
  var peg$c72 = "...";
  var peg$c73 = ":implements";
  var peg$c74 = ":extends";
  var peg$c75 = ":where";
  var peg$c76 = "nil";
  var peg$c77 = "null";
  var peg$c78 = "none";
  var peg$c79 = "void";
  var peg$c80 = "undefined";
  var peg$c81 = "implements";
  var peg$c82 = "inherits";
  var peg$c83 = "is";
  var peg$c84 = "has";
  var peg$c85 = ":is";
  var peg$c86 = ":as";
  var peg$c87 = ":of";
  var peg$c88 = ":cond";
  var peg$c89 = ":then";
  var peg$c90 = ":else";
  var peg$c91 = ":init";
  var peg$c92 = ":step";
  var peg$c93 = ":each";
  var peg$c94 = ":from";
  var peg$c95 = "<-";
  var peg$c96 = "->";
  var peg$c97 = "<=";
  var peg$c98 = "=>";
  var peg$c99 = "=";
  var peg$c100 = "public";
  var peg$c101 = "private";
  var peg$c102 = "static";
  var peg$c103 = "internal";
  var peg$c104 = "extern";
  var peg$c105 = "override";
  var peg$c106 = "explicit-cast";
  var peg$c107 = "implicit-cast";
  var peg$c108 = "extension";
  var peg$c109 = "operator";
  var peg$c110 = "ref";
  var peg$c111 = "readonly";
  var peg$c112 = "nullable";
  var peg$c113 = "ctor";

  var peg$r0 = /^[^()]/;
  var peg$r1 = /^["\/\\]/;
  var peg$r2 = /^[^\0-\x1F"\\]/;
  var peg$r3 = /^[0-7]/;
  var peg$r4 = /^[0-1]/;
  var peg$r5 = /^[+\-]/;
  var peg$r6 = /^[0-9]/;
  var peg$r7 = /^[.,?'"|@:`~;\^&*%$#=+!()[\]\/\\\\-_0-9a-zA-Z]/;
  var peg$r8 = /^[ \t]/;
  var peg$r9 = /^[\n\r]/;
  var peg$r10 = /^[^\n]/;
  var peg$r11 = /^[_\-*+\\\/\^&%$#@!~=|<>`:?]/;
  var peg$r12 = /^[^ \t\n\r.,?'"|@:`~;\^&*%$#=+!()[\]\/\\-_0-9]/;
  var peg$r13 = /^[_a-zA-Z]/;
  var peg$r14 = /^[0-9a-fA-F]/;
  var peg$r15 = /^[0]/;
  var peg$r16 = /^[1-9]/;
  var peg$r17 = /^[ \t\n\r]/;

  var peg$e0 = peg$otherExpectation("program");
  var peg$e1 = peg$otherExpectation("expression");
  var peg$e2 = peg$otherExpectation("list");
  var peg$e3 = peg$literalExpectation("(", false);
  var peg$e4 = peg$literalExpectation(")", false);
  var peg$e5 = peg$otherExpectation("quote");
  var peg$e6 = peg$literalExpectation("'", false);
  var peg$e7 = peg$literalExpectation("\"", false);
  var peg$e8 = peg$literalExpectation("'(", false);
  var peg$e9 = peg$classExpectation(["(", ")"], true, false);
  var peg$e10 = peg$otherExpectation("vector");
  var peg$e11 = peg$literalExpectation("[", false);
  var peg$e12 = peg$literalExpectation("|", false);
  var peg$e13 = peg$literalExpectation("]", false);
  var peg$e14 = peg$otherExpectation("matrix");
  var peg$e15 = peg$literalExpectation(",", false);
  var peg$e16 = peg$otherExpectation("map");
  var peg$e17 = peg$literalExpectation("{", false);
  var peg$e18 = peg$literalExpectation("}", false);
  var peg$e19 = peg$otherExpectation("key-value");
  var peg$e20 = peg$literalExpectation(":", false);
  var peg$e21 = peg$otherExpectation("key");
  var peg$e22 = peg$otherExpectation("export");
  var peg$e23 = peg$otherExpectation("import");
  var peg$e24 = peg$otherExpectation("type name");
  var peg$e25 = peg$otherExpectation("type");
  var peg$e26 = peg$literalExpectation("[]", false);
  var peg$e27 = peg$literalExpectation("&", false);
  var peg$e28 = peg$literalExpectation("<", false);
  var peg$e29 = peg$literalExpectation(">", false);
  var peg$e30 = peg$literalExpectation(".", false);
  var peg$e31 = peg$literalExpectation("|>", false);
  var peg$e32 = peg$literalExpectation("<|", false);
  var peg$e33 = peg$literalExpectation("in", false);
  var peg$e34 = peg$literalExpectation("out", false);
  var peg$e35 = peg$literalExpectation("finally", false);
  var peg$e36 = peg$literalExpectation("_", false);
  var peg$e37 = peg$literalExpectation("'\"", false);
  var peg$e38 = peg$literalExpectation("\\", false);
  var peg$e39 = peg$classExpectation(["\"", "/", "\\"], false, false);
  var peg$e40 = peg$literalExpectation("b", false);
  var peg$e41 = peg$literalExpectation("f", false);
  var peg$e42 = peg$literalExpectation("n", false);
  var peg$e43 = peg$literalExpectation("r", false);
  var peg$e44 = peg$literalExpectation("t", false);
  var peg$e45 = peg$literalExpectation("u", false);
  var peg$e46 = peg$classExpectation([["\0", "\x1F"], "\"", "\\"], true, false);
  var peg$e47 = peg$literalExpectation("0", false);
  var peg$e48 = peg$classExpectation([["0", "7"]], false, false);
  var peg$e49 = peg$literalExpectation("0b", false);
  var peg$e50 = peg$classExpectation([["0", "1"]], false, false);
  var peg$e51 = peg$literalExpectation("0x", false);
  var peg$e52 = peg$classExpectation(["+", "-"], false, false);
  var peg$e53 = peg$literalExpectation("/", false);
  var peg$e54 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e55 = peg$literalExpectation("e", false);
  var peg$e56 = peg$literalExpectation(";", false);
  var peg$e57 = peg$literalExpectation(";@", false);
  var peg$e58 = peg$classExpectation([".", ",", "?", "'", "\"", "|", "@", ":", "`", "~", ";", "^", "&", "*", "%", "$", "#", "=", "+", "!", "(", ")", "[", "]", "/", "\\", ["\\", "_"], ["0", "9"], ["a", "z"], ["A", "Z"]], false, false);
  var peg$e59 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e60 = peg$classExpectation(["\n", "\r"], false, false);
  var peg$e61 = peg$classExpectation(["\n"], true, false);
  var peg$e62 = peg$literalExpectation("attr", true);
  var peg$e63 = peg$literalExpectation("perf", true);
  var peg$e64 = peg$literalExpectation("lint", true);
  var peg$e65 = peg$literalExpectation("link", true);
  var peg$e66 = peg$literalExpectation("warn", true);
  var peg$e67 = peg$literalExpectation("def", true);
  var peg$e68 = peg$literalExpectation("if", true);
  var peg$e69 = peg$literalExpectation("match", true);
  var peg$e70 = peg$literalExpectation("while", true);
  var peg$e71 = peg$literalExpectation("for", true);
  var peg$e72 = peg$literalExpectation("cond", true);
  var peg$e73 = peg$literalExpectation("when", true);
  var peg$e74 = peg$literalExpectation("finally", true);
  var peg$e75 = peg$literalExpectation("catch", true);
  var peg$e76 = peg$literalExpectation("try", true);
  var peg$e77 = peg$literalExpectation("await", true);
  var peg$e78 = peg$literalExpectation("async", true);
  var peg$e79 = peg$literalExpectation("definterface", true);
  var peg$e80 = peg$literalExpectation("defclass", true);
  var peg$e81 = peg$literalExpectation("deftype", true);
  var peg$e82 = peg$literalExpectation("defenum", true);
  var peg$e83 = peg$literalExpectation("defmacro", true);
  var peg$e84 = peg$literalExpectation("defstruct", true);
  var peg$e85 = peg$literalExpectation("deftrait", true);
  var peg$e86 = peg$literalExpectation("fn", true);
  var peg$e87 = peg$literalExpectation("let", true);
  var peg$e88 = peg$literalExpectation("mut", true);
  var peg$e89 = peg$literalExpectation("keyof", true);
  var peg$e90 = peg$literalExpectation("import", true);
  var peg$e91 = peg$literalExpectation("export", true);
  var peg$e92 = peg$literalExpectation("from", true);
  var peg$e93 = peg$literalExpectation("true", true);
  var peg$e94 = peg$literalExpectation("#t", true);
  var peg$e95 = peg$literalExpectation("false", true);
  var peg$e96 = peg$literalExpectation("#f", true);
  var peg$e97 = peg$literalExpectation("...", true);
  var peg$e98 = peg$literalExpectation(":implements", true);
  var peg$e99 = peg$literalExpectation(":extends", true);
  var peg$e100 = peg$literalExpectation(":where", true);
  var peg$e101 = peg$literalExpectation("nil", true);
  var peg$e102 = peg$literalExpectation("null", true);
  var peg$e103 = peg$literalExpectation("none", true);
  var peg$e104 = peg$literalExpectation("void", true);
  var peg$e105 = peg$literalExpectation("undefined", true);
  var peg$e106 = peg$literalExpectation("implements", true);
  var peg$e107 = peg$literalExpectation("inherits", true);
  var peg$e108 = peg$literalExpectation("is", true);
  var peg$e109 = peg$literalExpectation("has", true);
  var peg$e110 = peg$literalExpectation(":is", true);
  var peg$e111 = peg$literalExpectation(":as", true);
  var peg$e112 = peg$literalExpectation(":of", true);
  var peg$e113 = peg$literalExpectation(":cond", true);
  var peg$e114 = peg$literalExpectation(":then", true);
  var peg$e115 = peg$literalExpectation(":else", true);
  var peg$e116 = peg$literalExpectation(":init", true);
  var peg$e117 = peg$literalExpectation(":step", true);
  var peg$e118 = peg$literalExpectation(":each", true);
  var peg$e119 = peg$literalExpectation(":from", true);
  var peg$e120 = peg$literalExpectation("<-", true);
  var peg$e121 = peg$literalExpectation("->", true);
  var peg$e122 = peg$literalExpectation("<=", true);
  var peg$e123 = peg$literalExpectation("=>", true);
  var peg$e124 = peg$literalExpectation("=", true);
  var peg$e125 = peg$literalExpectation("public", true);
  var peg$e126 = peg$literalExpectation("private", true);
  var peg$e127 = peg$literalExpectation("static", true);
  var peg$e128 = peg$literalExpectation("internal", true);
  var peg$e129 = peg$literalExpectation("extern", true);
  var peg$e130 = peg$literalExpectation("override", true);
  var peg$e131 = peg$literalExpectation("explicit-cast", true);
  var peg$e132 = peg$literalExpectation("implicit-cast", true);
  var peg$e133 = peg$literalExpectation("extension", true);
  var peg$e134 = peg$literalExpectation("operator", true);
  var peg$e135 = peg$literalExpectation("in", true);
  var peg$e136 = peg$literalExpectation("out", true);
  var peg$e137 = peg$literalExpectation("ref", true);
  var peg$e138 = peg$literalExpectation("readonly", true);
  var peg$e139 = peg$literalExpectation("nullable", true);
  var peg$e140 = peg$literalExpectation("ctor", true);
  var peg$e141 = peg$otherExpectation("control");
  var peg$e142 = peg$classExpectation(["_", "-", "*", "+", "\\", "/", "^", "&", "%", "$", "#", "@", "!", "~", "=", "|", "<", ">", "`", ":", "?"], false, false);
  var peg$e143 = peg$otherExpectation("non-control");
  var peg$e144 = peg$classExpectation([" ", "\t", "\n", "\r", ".", ",", "?", "'", "\"", "|", "@", ":", "`", "~", ";", "^", "&", "*", "%", "$", "#", "=", "+", "!", "(", ")", "[", "]", "/", ["\\", "_"], ["0", "9"]], true, false);
  var peg$e145 = peg$otherExpectation("alphabetical");
  var peg$e146 = peg$classExpectation(["_", ["a", "z"], ["A", "Z"]], false, false);
  var peg$e147 = peg$otherExpectation("hex");
  var peg$e148 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e149 = peg$otherExpectation("digit sequence");
  var peg$e150 = peg$classExpectation(["0"], false, false);
  var peg$e151 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e152 = peg$otherExpectation("digit");
  var peg$e153 = peg$otherExpectation("whitespace");
  var peg$e154 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
  var peg$e155 = peg$anyExpectation();

  var peg$f0 = function(program) {
    return makeNode("program", { program });
  };
  var peg$f1 = function(nodes) {
    return makeNode("list", { nodes });
  };
  var peg$f2 = function(nodes) {
    return makeNode("quote", { mode: "default", nodes });
  };
  var peg$f3 = function(nodes) {
    return makeNode("quote", { mode: "default", nodes });
  };
  var peg$f4 = function(mode, content) {
    return makeNode("quote", { mode: mode.id, nodes: null });
  };
  var peg$f5 = function(values) {
    return makeNode("vector", { values });
  };
  var peg$f6 = function(rows) {
    return makeNode("matrix", { rows });
  };
  var peg$f7 = function(values) {
    return values;
  };
  var peg$f8 = function(values) {
    return makeNode("map", { values });
  };
  var peg$f9 = function(key, value) {
    return makeNode("key-value", { key, value });
  };
  var peg$f10 = function(exports) {
    return makeNode("export", { exports })
  };
  var peg$f11 = function(symbol, as) {
    return { symbol, as };
  };
  var peg$f12 = function(imports) {
    return makeNode("import", { imports });
  };
  var peg$f13 = function(symbols, source) {
    return { ...source, symbols };
  };
  var peg$f14 = function(symbol, as) {
    return { symbol, as };
  };
  var peg$f15 = function(file) {
    return { source: { file }};
  };
  var peg$f16 = function(namespace) {
    return { source: { namespace }};
  };
  var peg$f17 = function(name) {
    return makeNode("type-name", { name });
  };
  var peg$f18 = function(type) {
    return makeNode("type", { type, array: false });
  };
  var peg$f19 = function(type, array) {
    return makeNode("type", { ...type, array: !!array });
  };
  var peg$f20 = function(head, tail) {
    const types = [head, ...tail];
    if (types.length === 1) {
      return types[0];
    }

    return makeNode("union-type", { types });
  };
  var peg$f21 = function(head, tail) {
    const types = [head, ...tail];
    if (types.length === 1) {
      return types[0];
    }

    return makeNode("intersection-type", { types: [head, ...tail] });
  };
  var peg$f22 = function(type, array) {
    return makeNode("", { ...type, array: !!array });
  };
  var peg$f23 = function(async, params, ret) {
    return makeNode("function-type", { params, ret });
  };
  var peg$f24 = function(name) {
    return makeNode("simple-type", { name });
  };
  var peg$f25 = function(name, generics) {
    return makeNode("generic-type", { name, generics });
  };
  var peg$f26 = function(keys) {
    return makeNode("map-type", { keys });
  };
  var peg$f27 = function(key, type) {
    return makeNode("map-key-type", { key, type });
  };
  var peg$f28 = function(mapping) {
    return makeNode("mapped-type", { mapping });
  };
  var peg$f29 = function(mutable, modifiers, name, type) {
    // TODO: complete
    return makeNode("type-mapping", {
      
    });
  };
  var peg$f30 = function(key, type) {
    return { key, type };
  };
  var peg$f31 = function(type, key) {
    return { type, key };
  };
  var peg$f32 = function(modifier) {
    return makeNode("modifier", { modifier });
  };
  var peg$f33 = function(mutable, modifiers, name, type, value) {
    return makeNode("variable", { name, mutable, modifiers, type, value });
  };
  var peg$f34 = function() { return false; };
  var peg$f35 = function() { return true; };
  var peg$f36 = function(async, modifiers, name, params, returns, body) {
    const extern = !!modifiers.find(x => x.modifier === "extern");
    return makeNode("function", { name, async: !!async, extern, modifiers, params, returns, body });
  };
  var peg$f37 = function(name, modifiers, type) {
    return makeNode("parameter", { name, modifiers, type });
  };
  var peg$f38 = function(id, operator, fn, args) {
      return { operator, function: fn[1], memberFunction: !!fn[0], arguments: args };
    };
  var peg$f39 = function(id, seq) {
    return makeNode("function-carrying", { identifier: id, sequence: seq });
  };
  var peg$f40 = function() { return "carrying-left"; };
  var peg$f41 = function() { return "carrying-right"; };
  var peg$f42 = function(head, tail) {
    return [head, ...tail];
  };
  var peg$f43 = function(name, generics) {
    return {
      name,
      generics
    }
  };
  var peg$f44 = function(modifiers, className, ext, constraints, body) {
    const { name, generics } = className;
    const genericsWithConstraints = (generics ?? []).map(x => {
      const genericConstraints = (constraints ?? [])
        .filter(c => c.where.name === x.name)
        .map(c => c.clause);

      return makeNode("generic-type", { ...x, constraints: genericConstraints });
    });

    const _implements = ext.filter(x => x._type === "implements").map(x => { return x });
    const _extends = ext.filter(x => x._type === "extends").map(x => { return x });
    return makeNode("class", { name, modifiers, implements: _implements, extends: _extends, generics: genericsWithConstraints, body });
  };
  var peg$f45 = function(modifiers, name, body) {
    return makeNode("enum", { name, modifiers, body });
  };
  var peg$f46 = function(modifiers, name, body) {
    return makeNode("struct", { name, modifiers, body });
  };
  var peg$f47 = function(modifiers, name) {
    // Continue...
    return makeNode("type-def", { });
  };
  var peg$f48 = function(covariant) {
    return covariant;
  };
  var peg$f49 = function(covariance, name) {
    return {
      name,
      covariance,
    };
  };
  var peg$f50 = function(head, tail) {
    return [head, ...tail];
  };
  var peg$f51 = function(name, generics) {
    return {
      name,
      generics
    }
  };
  var peg$f52 = function(modifiers, name, impl, body) {
    return makeNode("interface", { ...name, modifiers, implements: impl, body });
  };
  var peg$f53 = function(type) {
    return makeNode("implements", { type });
  };
  var peg$f54 = function(type) {
    return makeNode("extends", { type });
  };
  var peg$f55 = function(where, constraints) {
    return makeNode("type-constraint", { where, ...constraints });
  };
  var peg$f56 = function(name) {
    return name;
  };
  var peg$f57 = function(constraint, value) {
    return { constraint, value };
  };
  var peg$f58 = function(expression) {
    return makeNode("await", { expression });
  };
  var peg$f59 = function(expression) {
    return makeNode("spread", { expression });
  };
  var peg$f60 = function(assignable, value) {
    return makeNode("simple-assignment", { assignable, value });
  };
  var peg$f61 = function(assignable, operator, value) {
    return makeNode("compound-assignment", { assignable, value, operator });
  };
  var peg$f62 = function(id, indices) {
    return makeNode("indexer", { id, indices })
  };
  var peg$f63 = function(tryBlock, catchBlocks, finallyBlock) {
    return makeNode("try-catch", { try: tryBlock, catch: catchBlocks, finally: finallyBlock });
  };
  var peg$f64 = function(body) {
    return body;
  };
  var peg$f65 = function(filter, body) {
    return { filter, body };
  };
  var peg$f66 = function(name, type) {
    return { name, type };
  };
  var peg$f67 = function(body) {
    return body;
  };
  var peg$f68 = function(cond, then) {
    return makeNode("when", { condition: cond, then });
  };
  var peg$f69 = function(cond, then, elseThen) {
    return makeNode("if", { condition: cond, then, else: elseThen });
  };
  var peg$f70 = function(cases) {
    return makeNode("cond", { cases });
  };
  var peg$f71 = function(cond, body) {
    return makeNode("cond-case", { condition: cond, body });
  };
  var peg$f72 = function(init, cond, step, then, elseFor) {
    return makeNode("for", { initial: init, condition: cond, step, then, else: elseFor });
  };
  var peg$f73 = function(var_, coll, then) {
    return makeNode("for-each", { variable: var_, collection: coll, then });
  };
  var peg$f74 = function(cond, then) {
    return makeNode("while", { condition: cond, then });
  };
  var peg$f75 = function(expression, cases) {
    return makeNode("match", { expression, cases });
  };
  var peg$f76 = function(pattern, body) {
    return makeNode("match-case", { pattern, body });
  };
  var peg$f77 = function() { return makeNode("any-pattern"); };
  var peg$f78 = function(params, ret) {
    return makeNode("functional-pattern", { params, ret });
  };
  var peg$f79 = function(id, type) {
    return makeNode("type-pattern", { id, type });
  };
  var peg$f80 = function(elements) {
    return makeNode("list-pattern", { elements });
  };
  var peg$f81 = function(elements) {
    return makeNode("vector-pattern", { elements });
  };
  var peg$f82 = function(pairs) {
    return makeNode("map-pattern", { pairs });
  };
  var peg$f83 = function(key, pattern) {
    return makeNode("map-pattern-pair", { key, pattern });
  };
  var peg$f84 = function(id) {
    return makeNode("identifier-pattern", { id });
  };
  var peg$f85 = function(constant) {
    return makeNode("constant-pattern", { constant });
  };
  var peg$f86 = function(value) {
    return makeNode("string", { value });
  };
  var peg$f87 = function(items) {
    return makeNode("formatted-string", { value: foldStringFormat(items) });
  };
  var peg$f88 = function(expression) {
    return makeNode("format-expression", { expression });
  };
  var peg$f89 = function() { return "\b"; };
  var peg$f90 = function() { return "\f"; };
  var peg$f91 = function() { return "\n"; };
  var peg$f92 = function() { return "\r"; };
  var peg$f93 = function() { return "\t"; };
  var peg$f94 = function(digits) {
          return String.fromCharCode(parseInt(digits, 16));
        };
  var peg$f95 = function(sequence) { return sequence; };
  var peg$f96 = function() { return makeNode("boolean", { value: true }); };
  var peg$f97 = function() { return makeNode("boolean", { value: false }); };
  var peg$f98 = function(kw) { return makeNode("null", { keyword: kw }); };
  var peg$f99 = function(match) {
    return makeNode("octal-number", { match, value: parseInt(match, 8) });
  };
  var peg$f100 = function(match) {
    return makeNode("binary-number", { match, value: parseInt(match, 2) });
  };
  var peg$f101 = function(match) {
    return makeNode("hex-number", { match, value: parseInt(match, 16) });
  };
  var peg$f102 = function(a, b) {
    return makeNode("fraction-number", { match: text().trim(), numerator: parseInt(a), denominator: parseInt(b) });
  };
  var peg$f103 = function(match) {
    return makeNode("integer-number", { match, value: parseInt(match) });
  };
  var peg$f104 = function(match) {
    return makeNode("float-number", { match, value: parseFloat(match) });
  };
  var peg$f105 = function(id) {
    return makeNode("simple-identifier", { id });
  };
  var peg$f106 = function(head, tail) {
    const id = `${head}.${tail.join(".")}`;
    return makeNode("composite-identifier", { id, parts: [ head, ...tail ] });
  };
  var peg$f107 = function(id) { return id; };
  var peg$f108 = function(comment) {
    return makeNode("comment", { comment });
  };
  var peg$f109 = function(mode, command, options) {
          return {
            command: command,
            mode: mode === "+" ? "enable" : "disbale",
            options: options,
          };
        };
  var peg$f110 = function(control) {
    return makeNode("control-comment", { ...control });
  };
  var peg$f111 = function() { return "compiler-attribute"; };
  var peg$f112 = function() { return "performance-optimization"; };
  var peg$f113 = function() { return "linter-option"; };
  var peg$f114 = function() { return "linker-option"; };
  var peg$f115 = function() { return "warning"; };
  var peg$f116 = function() { return "define"; };
  var peg$f117 = function() { return "conditional"; };
  var peg$f118 = function() {
    return text().toLowerCase();
  };
  var peg$f119 = function() {
    return text().toLowerCase();
  };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseProgram() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseExpression();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseExpression();
    }
    s2 = peg$parseEOF();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    peg$savedPos = s0;
    s0 = peg$f0(s1);
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e0); }

    return s0;
  }

  function peg$parseExpression() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseComment();
    if (s0 === peg$FAILED) {
      s0 = peg$parseImport();
      if (s0 === peg$FAILED) {
        s0 = peg$parseExport();
        if (s0 === peg$FAILED) {
          s0 = peg$parseVariable();
          if (s0 === peg$FAILED) {
            s0 = peg$parseFunction();
            if (s0 === peg$FAILED) {
              s0 = peg$parseInterface();
              if (s0 === peg$FAILED) {
                s0 = peg$parseTypeDef();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseClass();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseStruct();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseEnum();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseAwait();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseWhen();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseIf();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseCond();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseFor();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseForEach();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseWhile();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseTryCatchFinally();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseFunctionCarrying();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseMatch();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseAssignment();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseIndexer();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseSpread();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseList();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseMap();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseVector();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseMatrix();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseQuote();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseIdentifier();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseNumber();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseString();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseBoolean();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseNil();
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    return s0;
  }

  function peg$parseList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c0;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$parseExpression();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseExpression();
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s6 = peg$c1;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f1(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parseQuote() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 39) {
      s2 = peg$c2;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s4 = peg$c3;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f2(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c4) {
        s2 = peg$c4;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = [];
        s5 = peg$parseExpression();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseExpression();
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c1;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f3(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c4) {
            s3 = peg$c4;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseQuoteContent();
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s7 = peg$c1;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f4(s2, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }

    return s0;
  }

  function peg$parseQuoteContent() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseQuotedExpression();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseQuotedExpression();
    }
    s0 = input.substring(s0, peg$currPos);

    return s0;
  }

  function peg$parseQuotedExpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQuoteContent();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c1;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4, s5];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = [];
      s1 = input.charAt(peg$currPos);
      if (peg$r0.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = input.charAt(peg$currPos);
          if (peg$r0.test(s1)) {
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseVector() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c5;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 124) {
        s7 = peg$c6;
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      peg$silentFails--;
      if (s7 === peg$FAILED) {
        s6 = undefined;
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parseExpression();
        if (s7 !== peg$FAILED) {
          s5 = s7;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 124) {
          s7 = peg$c6;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        peg$silentFails--;
        if (s7 === peg$FAILED) {
          s6 = undefined;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseExpression();
          if (s7 !== peg$FAILED) {
            s5 = s7;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s6 = peg$c7;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f5(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

    return s0;
  }

  function peg$parseMatrix() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c5;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$currPos;
      s5 = [];
      s6 = peg$parseMatrixRow();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 124) {
          s7 = peg$c6;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s7 !== peg$FAILED) {
          s7 = peg$parseMatrixRow();
          if (s7 === peg$FAILED) {
            peg$currPos = s6;
            s6 = peg$FAILED;
          } else {
            s6 = s7;
          }
        } else {
          s6 = s7;
        }
      }
      if (s5.length < 1) {
        peg$currPos = s4;
        s4 = peg$FAILED;
      } else {
        s4 = s5;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s6 = peg$c7;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f6(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

    return s0;
  }

  function peg$parseMatrixRow() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    s3 = [];
    s4 = peg$currPos;
    s5 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 124) {
      s6 = peg$c6;
      peg$currPos++;
    } else {
      s6 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    peg$silentFails--;
    if (s6 === peg$FAILED) {
      s5 = undefined;
    } else {
      peg$currPos = s5;
      s5 = peg$FAILED;
    }
    if (s5 !== peg$FAILED) {
      s6 = peg$parseExpression();
      if (s6 !== peg$FAILED) {
        s4 = s6;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c8;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s5 = peg$currPos;
      s6 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 124) {
        s7 = peg$c6;
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      peg$silentFails--;
      if (s7 === peg$FAILED) {
        s6 = undefined;
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parseExpression();
        if (s7 !== peg$FAILED) {
          s5 = s7;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        peg$currPos = s4;
        s4 = peg$FAILED;
      } else {
        s4 = s5;
      }
    }
    if (s3.length < 1) {
      peg$currPos = s2;
      s2 = peg$FAILED;
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f7(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMap() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 123) {
      s2 = peg$c9;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$parseMapBody();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c8;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s6 = peg$parseMapBody();
        if (s6 === peg$FAILED) {
          peg$currPos = s5;
          s5 = peg$FAILED;
        } else {
          s5 = s6;
        }
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s6 = peg$c10;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f8(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

    return s0;
  }

  function peg$parseMapBody() {
    var s0;

    s0 = peg$parseKeyValue();
    if (s0 === peg$FAILED) {
      s0 = peg$parseComment();
    }

    return s0;
  }

  function peg$parseKeyValue() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 58) {
      s2 = peg$c11;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseKey();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseExpression();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f9(s4, s6);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    return s0;
  }

  function peg$parseKey() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseSimpleIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parseString();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

    return s0;
  }

  function peg$parseExport() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseExportKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parseExportAlias();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s7 = peg$parseExportAlias();
          if (s7 === peg$FAILED) {
            peg$currPos = s6;
            s6 = peg$FAILED;
          } else {
            s6 = s7;
          }
        }
        if (s5.length < 1) {
          peg$currPos = s4;
          s4 = peg$FAILED;
        } else {
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f10(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }

    return s0;
  }

  function peg$parseExportAlias() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 === peg$FAILED) {
      s1 = peg$parseType();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$parseAsModKw();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseIdentifier();
          if (s6 !== peg$FAILED) {
            s3 = s6;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f11(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseImport() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseImportKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parseImportDefinition();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s7 = peg$parseImportDefinition();
          if (s7 === peg$FAILED) {
            peg$currPos = s6;
            s6 = peg$FAILED;
          } else {
            s6 = s7;
          }
        }
        if (s5.length < 1) {
          peg$currPos = s4;
          s4 = peg$FAILED;
        } else {
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f12(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    return s0;
  }

  function peg$parseImportDefinition() {
    var s0;

    s0 = peg$parseImportSymbolsDefinition();
    if (s0 === peg$FAILED) {
      s0 = peg$parseImportSource();
    }

    return s0;
  }

  function peg$parseImportSymbolsDefinition() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseSymbolAlias();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c8;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s5 = peg$parseSymbolAlias();
        if (s5 === peg$FAILED) {
          peg$currPos = s4;
          s4 = peg$FAILED;
        } else {
          s4 = s5;
        }
      }
      if (s3.length < 1) {
        peg$currPos = s2;
        s2 = peg$FAILED;
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c10;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseFromKw();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseImportSource();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f13(s2, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSymbolAlias() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseTypeName();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$currPos;
      s5 = peg$parseAsModKw();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseTypeName();
          if (s7 !== peg$FAILED) {
            s4 = s7;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f14(s2, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseImportSource() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseRawString();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f16(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseTypeName() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    s3 = peg$currPos;
    s4 = peg$parseAlpha();
    if (s4 !== peg$FAILED) {
      s5 = [];
      s6 = peg$parseAlpha();
      if (s6 === peg$FAILED) {
        s6 = peg$parseDigit();
      }
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parseAlpha();
        if (s6 === peg$FAILED) {
          s6 = peg$parseDigit();
        }
      }
      s4 = [s4, s5];
      s3 = s4;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s2 = input.substring(s2, peg$currPos);
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f17(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseType() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseUnionType();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f18(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c0;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseUnionType();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s5 = peg$c1;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.substr(peg$currPos, 2) === peg$c12) {
              s7 = peg$c12;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e26); }
            }
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            s8 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f19(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    return s0;
  }

  function peg$parseUnionType() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseIntersectionType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s5 = peg$c6;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseIntersectionType();
        if (s7 !== peg$FAILED) {
          s4 = s7;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 124) {
          s5 = peg$c6;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIntersectionType();
          if (s7 !== peg$FAILED) {
            s4 = s7;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f20(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIntersectionType() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseBasicTypes();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s5 = peg$c13;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseBasicTypes();
        if (s7 !== peg$FAILED) {
          s4 = s7;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 38) {
          s5 = peg$c13;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseBasicTypes();
          if (s7 !== peg$FAILED) {
            s4 = s7;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f21(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBasicTypes() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseFunctionType();
    if (s2 === peg$FAILED) {
      s2 = peg$parseMapType();
      if (s2 === peg$FAILED) {
        s2 = peg$parseGenericType();
        if (s2 === peg$FAILED) {
          s2 = peg$parseSimpleType();
        }
      }
    }
    if (s2 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c12) {
        s3 = peg$c12;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f22(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionType() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    s3 = peg$parseAsyncKw();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parse_();
    s4 = peg$parseFunctionKw();
    if (s4 !== peg$FAILED) {
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 91) {
        s6 = peg$c5;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s6 !== peg$FAILED) {
        s7 = [];
        s8 = peg$parseType();
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$parseType();
        }
        if (input.charCodeAt(peg$currPos) === 93) {
          s8 = peg$c7;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s10 = peg$parseRightArrowKw();
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$parseType();
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f23(s2, s7, s12);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSimpleType() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseTypeName();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f24(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGenericType() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseTypeName();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 60) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parseType();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s7 = peg$parseType();
          if (s7 === peg$FAILED) {
            peg$currPos = s6;
            s6 = peg$FAILED;
          } else {
            s6 = s7;
          }
        }
        if (s5.length < 1) {
          peg$currPos = s4;
          s4 = peg$FAILED;
        } else {
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s5 = peg$c15;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e29); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f25(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMapType() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 123) {
      s2 = peg$c9;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseKeyDefinition();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c8;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s5 = peg$parseKeyDefinition();
        if (s5 === peg$FAILED) {
          peg$currPos = s4;
          s4 = peg$FAILED;
        } else {
          s4 = s5;
        }
      }
      if (input.charCodeAt(peg$currPos) === 125) {
        s4 = peg$c10;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f26(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseKeyDefinition() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 58) {
      s2 = peg$c11;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseMapKey();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseLeftArrowKw();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseType();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f27(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMapKey() {
    var s0;

    s0 = peg$parseIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parseString();
    }

    return s0;
  }

  function peg$parseMappedType() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 123) {
      s2 = peg$c9;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$parseFieldsMapping();
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseFieldsMapping();
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c10;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f28(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFieldsMapping() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c0;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseLetMutMode();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseModifier();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseModifier();
          }
          s7 = peg$parse_();
          s8 = peg$parseKeySelector();
          if (s8 === peg$FAILED) {
            s8 = peg$parseIdentifier();
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$currPos;
            s11 = peg$parseLeftArrowKw();
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = peg$parseTypeSelector();
              if (s13 === peg$FAILED) {
                s13 = peg$parseType();
              }
              if (s13 !== peg$FAILED) {
                s10 = s13;
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s12 = peg$c1;
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f29(s4, s6, s8, s10);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseKeySelector() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c5;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseIdentifier();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseKeyOfKw();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseTypeName();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 93) {
                  s10 = peg$c7;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e13); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  peg$savedPos = s0;
                  s0 = peg$f30(s4, s8);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeSelector() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseTypeName();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 91) {
        s4 = peg$c5;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseIdentifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s8 = peg$c7;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f31(s2, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseModifier() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c11;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseModifierKw();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f32(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVariable() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseLetMutMode();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseModifier();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseModifier();
        }
        s5 = peg$parse_();
        s6 = peg$parseIdentifier();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        s8 = peg$currPos;
        s9 = peg$parseLeftArrowKw();
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          s11 = peg$parseType();
          if (s11 !== peg$FAILED) {
            s8 = s11;
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
        } else {
          peg$currPos = s8;
          s8 = peg$FAILED;
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$parse_();
        s10 = peg$parseExpression();
        if (s10 === peg$FAILED) {
          s10 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f33(s2, s4, s6, s8, s10);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLetMutMode() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseLetKw();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f34();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseMutKw();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f35();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    s3 = peg$parseAsyncKw();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parse_();
    s4 = peg$parseFunctionKw();
    if (s4 !== peg$FAILED) {
      s5 = peg$parse__();
      if (s5 !== peg$FAILED) {
        s6 = [];
        s7 = peg$currPos;
        s8 = peg$parseModifier();
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s7 = s8;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$currPos;
          s8 = peg$parseModifier();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        }
        s7 = peg$parse_();
        s8 = peg$parseIdentifier();
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 91) {
          s10 = peg$c5;
          peg$currPos++;
        } else {
          s10 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s10 !== peg$FAILED) {
          s11 = peg$parse_();
          s12 = [];
          s13 = peg$parseFunctionParameter();
          while (s13 !== peg$FAILED) {
            s12.push(s13);
            s13 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s14 = peg$c8;
              peg$currPos++;
            } else {
              s14 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s14 === peg$FAILED) {
              s14 = null;
            }
            s14 = peg$parseFunctionParameter();
            if (s14 === peg$FAILED) {
              peg$currPos = s13;
              s13 = peg$FAILED;
            } else {
              s13 = s14;
            }
          }
          s13 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s14 = peg$c7;
            peg$currPos++;
          } else {
            s14 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s14 !== peg$FAILED) {
            s15 = peg$parse_();
            s16 = peg$currPos;
            s17 = peg$parseRightArrowKw();
            if (s17 !== peg$FAILED) {
              s18 = peg$parse_();
              s19 = peg$parseType();
              if (s19 !== peg$FAILED) {
                s16 = s19;
              } else {
                peg$currPos = s16;
                s16 = peg$FAILED;
              }
            } else {
              peg$currPos = s16;
              s16 = peg$FAILED;
            }
            if (s16 === peg$FAILED) {
              s16 = null;
            }
            s17 = peg$parse_();
            s18 = [];
            s19 = peg$parseExpression();
            while (s19 !== peg$FAILED) {
              s18.push(s19);
              s19 = peg$parseExpression();
            }
            s19 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f36(s2, s6, s8, s12, s16, s18);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionParameter() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseIdentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parseModifier();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = s6;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parseModifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s5 = peg$parse_();
      s6 = peg$currPos;
      s7 = peg$parseLeftArrowKw();
      if (s7 !== peg$FAILED) {
        s8 = peg$parse_();
        s9 = peg$parseType();
        if (s9 !== peg$FAILED) {
          s6 = s9;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f37(s2, s4, s6);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionCarrying() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseIdentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parse_();
      s7 = peg$parseCarryingOperator();
      if (s7 !== peg$FAILED) {
        s8 = peg$parse_();
        s9 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s10 = peg$c16;
          peg$currPos++;
        } else {
          s10 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
        if (s10 === peg$FAILED) {
          s10 = null;
        }
        s11 = peg$parseIdentifier();
        if (s11 !== peg$FAILED) {
          s10 = [s10, s11];
          s9 = s10;
        } else {
          peg$currPos = s9;
          s9 = peg$FAILED;
        }
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          s11 = [];
          s12 = peg$currPos;
          s13 = peg$currPos;
          peg$silentFails++;
          s14 = peg$parseCarryingOperator();
          peg$silentFails--;
          if (s14 === peg$FAILED) {
            s13 = undefined;
          } else {
            peg$currPos = s13;
            s13 = peg$FAILED;
          }
          if (s13 !== peg$FAILED) {
            s14 = peg$parseExpression();
            if (s14 !== peg$FAILED) {
              s12 = s14;
            } else {
              peg$currPos = s12;
              s12 = peg$FAILED;
            }
          } else {
            peg$currPos = s12;
            s12 = peg$FAILED;
          }
          while (s12 !== peg$FAILED) {
            s11.push(s12);
            s12 = peg$currPos;
            s13 = peg$currPos;
            peg$silentFails++;
            s14 = peg$parseCarryingOperator();
            peg$silentFails--;
            if (s14 === peg$FAILED) {
              s13 = undefined;
            } else {
              peg$currPos = s13;
              s13 = peg$FAILED;
            }
            if (s13 !== peg$FAILED) {
              s14 = peg$parseExpression();
              if (s14 !== peg$FAILED) {
                s12 = s14;
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
            } else {
              peg$currPos = s12;
              s12 = peg$FAILED;
            }
          }
          s12 = peg$parse_();
          peg$savedPos = s5;
          s5 = peg$f38(s2, s7, s9, s11);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          s7 = peg$parseCarryingOperator();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s10 = peg$c16;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e30); }
            }
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            s11 = peg$parseIdentifier();
            if (s11 !== peg$FAILED) {
              s10 = [s10, s11];
              s9 = s10;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = [];
              s12 = peg$currPos;
              s13 = peg$currPos;
              peg$silentFails++;
              s14 = peg$parseCarryingOperator();
              peg$silentFails--;
              if (s14 === peg$FAILED) {
                s13 = undefined;
              } else {
                peg$currPos = s13;
                s13 = peg$FAILED;
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parseExpression();
                if (s14 !== peg$FAILED) {
                  s12 = s14;
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$currPos;
                s13 = peg$currPos;
                peg$silentFails++;
                s14 = peg$parseCarryingOperator();
                peg$silentFails--;
                if (s14 === peg$FAILED) {
                  s13 = undefined;
                } else {
                  peg$currPos = s13;
                  s13 = peg$FAILED;
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parseExpression();
                  if (s14 !== peg$FAILED) {
                    s12 = s14;
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              }
              s12 = peg$parse_();
              peg$savedPos = s5;
              s5 = peg$f38(s2, s7, s9, s11);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f39(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCarryingOperator() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f40();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c18) {
        s1 = peg$c18;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f41();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseClassGenerics() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 60) {
      s2 = peg$c14;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseTypeName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = [];
        s6 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c8;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseTypeName();
          if (s9 !== peg$FAILED) {
            s6 = s9;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseTypeName();
            if (s9 !== peg$FAILED) {
              s6 = s9;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        if (input.charCodeAt(peg$currPos) === 62) {
          s6 = peg$c15;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f42(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClassName() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseTypeName();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseClassGenerics();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f43(s2, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClass() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseDefClassKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseModifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parseModifier();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parse_();
        s6 = peg$parseClassName();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        s8 = [];
        s9 = peg$parseImplements();
        if (s9 === peg$FAILED) {
          s9 = peg$parseExtends();
        }
        while (s9 !== peg$FAILED) {
          s8.push(s9);
          s9 = peg$parseImplements();
          if (s9 === peg$FAILED) {
            s9 = peg$parseExtends();
          }
        }
        s9 = [];
        s10 = peg$parseGenericTypeConstraints();
        while (s10 !== peg$FAILED) {
          s9.push(s10);
          s10 = peg$parseGenericTypeConstraints();
        }
        s10 = peg$parse_();
        s11 = [];
        s12 = peg$parseExpression();
        while (s12 !== peg$FAILED) {
          s11.push(s12);
          s12 = peg$parseExpression();
        }
        peg$savedPos = s0;
        s0 = peg$f44(s4, s6, s8, s9, s11);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnum() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseDefEnumKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseModifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parseModifier();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parse_();
        s6 = peg$parseTypeName();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        s8 = [];
        s9 = peg$parseExpression();
        while (s9 !== peg$FAILED) {
          s8.push(s9);
          s9 = peg$parseExpression();
        }
        peg$savedPos = s0;
        s0 = peg$f45(s4, s6, s8);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStruct() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseDefStructKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseModifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parseModifier();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parse_();
        s6 = peg$parseTypeName();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        s8 = [];
        s9 = peg$parseExpression();
        while (s9 !== peg$FAILED) {
          s8.push(s9);
          s9 = peg$parseExpression();
        }
        peg$savedPos = s0;
        s0 = peg$f46(s4, s6, s8);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeDef() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseDefTypeKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseModifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parseModifier();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parse_();
        s6 = peg$parseIdentifier();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f47(s4, s6);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInterfaceGenericCovariance() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 58) {
      s2 = peg$c11;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s2 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c19) {
        s3 = peg$c19;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c20) {
          s3 = peg$c20;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f48(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInterfaceGenericTypeName() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    s3 = peg$parseInterfaceGenericCovariance();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseTypeName();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f49(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInterfaceGenerics() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 60) {
      s2 = peg$c14;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseInterfaceGenericTypeName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = [];
        s6 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c8;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseInterfaceGenericTypeName();
          if (s9 !== peg$FAILED) {
            s6 = s9;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseInterfaceGenericTypeName();
            if (s9 !== peg$FAILED) {
              s6 = s9;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        if (input.charCodeAt(peg$currPos) === 62) {
          s6 = peg$c15;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f50(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInterfaceName() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseTypeName();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseInterfaceGenerics();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f51(s2, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInterface() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseDefInterfaceKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parseModifier();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s5 = s6;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parseModifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s5 = peg$parse_();
      s6 = peg$parseInterfaceName();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s7 = peg$parse_();
      s8 = peg$parseImplements();
      if (s8 === peg$FAILED) {
        s8 = null;
      }
      s9 = peg$parse_();
      s10 = [];
      s11 = peg$parseExpression();
      while (s11 !== peg$FAILED) {
        s10.push(s11);
        s11 = peg$parseExpression();
      }
      peg$savedPos = s0;
      s0 = peg$f52(s4, s6, s8, s10);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseImplements() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseImplementsModKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseTypeName();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f53(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExtends() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseExtendsModKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseTypeName();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f54(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGenericTypeConstraints() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseWhere();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$parseTypeConstraint();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseTypeConstraint();
      }
      peg$savedPos = s0;
      s0 = peg$f55(s2, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhere() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseWhereModKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseTypeName();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f56(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeConstraint() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 58) {
      s2 = peg$c11;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseConstraintKw();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f57(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAwait() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseAwaitKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseExpression();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f58(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSpread() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseSpreadKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f59(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssignment() {
    var s0;

    s0 = peg$parseSimpleAssignment();
    if (s0 === peg$FAILED) {
      s0 = peg$parseCompoundAssignment();
    }

    return s0;
  }

  function peg$parseSimpleAssignment() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseAssignable();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseAssignmentOperatorKw();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseExpression();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f60(s2, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCompoundAssignment() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseAssignable();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$currPos;
      s5 = peg$parseCompoundAssignmentOperator();
      if (s5 !== peg$FAILED) {
        s4 = input.substring(s4, peg$currPos);
      } else {
        s4 = s5;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseExpression();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f61(s2, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCompoundAssignmentOperator() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseControl();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseAssignmentOperatorKw();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssignable() {
    var s0;

    s0 = peg$parseList();
    if (s0 === peg$FAILED) {
      s0 = peg$parseVector();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMap();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMatrix();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIndexer();
            if (s0 === peg$FAILED) {
              s0 = peg$parseIdentifier();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseIndexer() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s5 = peg$c5;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = [];
        s8 = peg$parseExpression();
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s9 = peg$c8;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s9 = peg$parseExpression();
          if (s9 === peg$FAILED) {
            peg$currPos = s8;
            s8 = peg$FAILED;
          } else {
            s8 = s9;
          }
        }
        if (s7.length < 1) {
          peg$currPos = s6;
          s6 = peg$FAILED;
        } else {
          s6 = s7;
        }
        if (s6 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s7 !== peg$FAILED) {
            s4 = s6;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s5 = peg$c5;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = [];
          s8 = peg$parseExpression();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s9 = peg$c8;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s9 = peg$parseExpression();
            if (s9 === peg$FAILED) {
              peg$currPos = s8;
              s8 = peg$FAILED;
            } else {
              s8 = s9;
            }
          }
          if (s7.length < 1) {
            peg$currPos = s6;
            s6 = peg$FAILED;
          } else {
            s6 = s7;
          }
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s7 = peg$c7;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s7 !== peg$FAILED) {
              s4 = s6;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s3.length < 1) {
        peg$currPos = s2;
        s2 = peg$FAILED;
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f62(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTryCatchFinally() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTry();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseCatch();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseCatch();
      }
      s3 = peg$parseFinally();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f63(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTry() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTryKw();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpression();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f64(s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCatch() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseCatchKw();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseCatchFilter();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      s5 = peg$parseExpression();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f65(s3, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCatchFilter() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSimpleIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$parseOfModKw();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseTypeName();
        if (s6 !== peg$FAILED) {
          s3 = s6;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f66(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFinally() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f67(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhen() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseWhenKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parseCondModKw();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseExpression();
        if (s6 !== peg$FAILED) {
          s4 = s6;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        s6 = peg$currPos;
        s7 = peg$currPos;
        s8 = peg$parseThenModKw();
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          if (s9 !== peg$FAILED) {
            s8 = [s8, s9];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = [];
        s9 = peg$parseExpression();
        while (s9 !== peg$FAILED) {
          s8.push(s9);
          s9 = peg$parseExpression();
        }
        s6 = s8;
        peg$savedPos = s0;
        s0 = peg$f68(s4, s6);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIf() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseIfKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parseCondModKw();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseExpression();
        if (s6 !== peg$FAILED) {
          s4 = s6;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        s6 = peg$currPos;
        s7 = peg$currPos;
        s8 = peg$parseThenModKw();
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          if (s9 !== peg$FAILED) {
            s8 = [s8, s9];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parseExpression();
        if (s8 !== peg$FAILED) {
          s6 = s8;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        s8 = peg$currPos;
        s9 = peg$currPos;
        s10 = peg$parseElseModKw();
        if (s10 !== peg$FAILED) {
          s11 = peg$parse__();
          if (s11 !== peg$FAILED) {
            s10 = [s10, s11];
            s9 = s10;
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
        } else {
          peg$currPos = s9;
          s9 = peg$FAILED;
        }
        if (s9 === peg$FAILED) {
          s9 = null;
        }
        s10 = peg$parseExpression();
        if (s10 !== peg$FAILED) {
          s8 = s10;
        } else {
          peg$currPos = s8;
          s8 = peg$FAILED;
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f69(s4, s6, s8);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCond() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseCondKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseCondCase();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseCondCase();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f70(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCondCase() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parseCondModKw();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseExpression();
      if (s5 !== peg$FAILED) {
        s3 = s5;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      s5 = peg$currPos;
      s6 = peg$currPos;
      s7 = peg$parseThenModKw();
      if (s7 !== peg$FAILED) {
        s8 = peg$parse__();
        if (s8 !== peg$FAILED) {
          s7 = [s7, s8];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s7 = peg$parseExpression();
      if (s7 !== peg$FAILED) {
        s5 = s7;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s7 = peg$c1;
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s7 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f71(s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFor() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseForKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parseInitModKw();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseExpression();
        if (s6 !== peg$FAILED) {
          s4 = s6;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        s6 = peg$currPos;
        s7 = peg$currPos;
        s8 = peg$parseCondModKw();
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          if (s9 !== peg$FAILED) {
            s8 = [s8, s9];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parseExpression();
        if (s8 !== peg$FAILED) {
          s6 = s8;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        s8 = peg$currPos;
        s9 = peg$currPos;
        s10 = peg$parseStepModKw();
        if (s10 !== peg$FAILED) {
          s11 = peg$parse__();
          if (s11 !== peg$FAILED) {
            s10 = [s10, s11];
            s9 = s10;
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
        } else {
          peg$currPos = s9;
          s9 = peg$FAILED;
        }
        if (s9 === peg$FAILED) {
          s9 = null;
        }
        s10 = peg$parseExpression();
        if (s10 !== peg$FAILED) {
          s8 = s10;
        } else {
          peg$currPos = s8;
          s8 = peg$FAILED;
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$parse_();
        s10 = peg$currPos;
        s11 = peg$currPos;
        s12 = peg$parseThenModKw();
        if (s12 !== peg$FAILED) {
          s13 = peg$parse__();
          if (s13 !== peg$FAILED) {
            s12 = [s12, s13];
            s11 = s12;
          } else {
            peg$currPos = s11;
            s11 = peg$FAILED;
          }
        } else {
          peg$currPos = s11;
          s11 = peg$FAILED;
        }
        if (s11 === peg$FAILED) {
          s11 = null;
        }
        s12 = peg$parseExpression();
        if (s12 !== peg$FAILED) {
          s10 = s12;
        } else {
          peg$currPos = s10;
          s10 = peg$FAILED;
        }
        if (s10 === peg$FAILED) {
          s10 = null;
        }
        s11 = peg$parse_();
        s12 = peg$currPos;
        s13 = peg$currPos;
        s14 = peg$parseElseModKw();
        if (s14 !== peg$FAILED) {
          s15 = peg$parse__();
          if (s15 !== peg$FAILED) {
            s14 = [s14, s15];
            s13 = s14;
          } else {
            peg$currPos = s13;
            s13 = peg$FAILED;
          }
        } else {
          peg$currPos = s13;
          s13 = peg$FAILED;
        }
        if (s13 === peg$FAILED) {
          s13 = null;
        }
        s14 = peg$parseExpression();
        if (s14 !== peg$FAILED) {
          s12 = s14;
        } else {
          peg$currPos = s12;
          s12 = peg$FAILED;
        }
        if (s12 === peg$FAILED) {
          s12 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f72(s4, s6, s8, s10, s12);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseForEach() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseForKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parseEachModKw();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseIdentifier();
        if (s6 !== peg$FAILED) {
          s4 = s6;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        s6 = peg$currPos;
        s7 = peg$currPos;
        s8 = peg$parseFromModKw();
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          if (s9 !== peg$FAILED) {
            s8 = [s8, s9];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parseExpression();
        if (s8 !== peg$FAILED) {
          s6 = s8;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        s8 = peg$currPos;
        s9 = peg$currPos;
        s10 = peg$parseThenModKw();
        if (s10 !== peg$FAILED) {
          s11 = peg$parse__();
          if (s11 !== peg$FAILED) {
            s10 = [s10, s11];
            s9 = s10;
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
        } else {
          peg$currPos = s9;
          s9 = peg$FAILED;
        }
        if (s9 === peg$FAILED) {
          s9 = null;
        }
        s10 = peg$parseExpression();
        if (s10 !== peg$FAILED) {
          s8 = s10;
        } else {
          peg$currPos = s8;
          s8 = peg$FAILED;
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f73(s4, s6, s8);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhile() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseWhileKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parseCondModKw();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseExpression();
        if (s6 !== peg$FAILED) {
          s4 = s6;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        s6 = peg$currPos;
        s7 = peg$currPos;
        s8 = peg$parseThenModKw();
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          if (s9 !== peg$FAILED) {
            s8 = [s8, s9];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parseExpression();
        if (s8 !== peg$FAILED) {
          s6 = s8;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f74(s4, s6);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMatch() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseMatchKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseExpression();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 123) {
            s6 = peg$c9;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e17); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = [];
            s9 = peg$parseMatchCase();
            if (s9 !== peg$FAILED) {
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parseMatchCase();
              }
            } else {
              s8 = peg$FAILED;
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s10 = peg$c10;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e18); }
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f75(s4, s8);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMatchCase() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsePattern();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseRightDoubleArrowKw();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseExpression();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f76(s2, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePattern() {
    var s0;

    s0 = peg$parseAnyPattern();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFunctionalPattern();
      if (s0 === peg$FAILED) {
        s0 = peg$parseListPattern();
        if (s0 === peg$FAILED) {
          s0 = peg$parseVectorPattern();
          if (s0 === peg$FAILED) {
            s0 = peg$parseMapPattern();
            if (s0 === peg$FAILED) {
              s0 = peg$parseTypePattern();
              if (s0 === peg$FAILED) {
                s0 = peg$parseIdentifierPattern();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseConstantPattern();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAnyPattern() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 95) {
      s1 = peg$c22;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f77();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionalPattern() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parsePattern();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsePattern();
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s5 = peg$c1;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseRightArrowKw();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parsePattern();
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f78(s3, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypePattern() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIsModKw();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseType();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f79(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseListPattern() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parsePattern();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsePattern();
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s5 = peg$c1;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f80(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVectorPattern() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c5;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parsePattern();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsePattern();
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s5 = peg$c7;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f81(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMapPattern() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseMapPatternPair();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c8;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseMapPatternPair();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c8;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c10;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f82(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMapPatternPair() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 58) {
      s2 = peg$c11;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseKey();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsePattern();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f83(s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifierPattern() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f84(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseConstantPattern() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseString();
    if (s1 === peg$FAILED) {
      s1 = peg$parseNumber();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f85(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseString() {
    var s0;

    s0 = peg$parseRawString();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFormattedString();
    }

    return s0;
  }

  function peg$parseRawString() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 34) {
      s2 = peg$c3;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parseChar();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseChar();
      }
      s3 = input.substring(s3, peg$currPos);
      if (input.charCodeAt(peg$currPos) === 34) {
        s4 = peg$c3;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f86(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFormattedString() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c23) {
      s2 = peg$c23;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseFormat();
      if (s4 === peg$FAILED) {
        s4 = peg$parseChar();
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseFormat();
        if (s4 === peg$FAILED) {
          s4 = peg$parseChar();
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s4 = peg$c3;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f87(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFormat() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpression();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (input.charCodeAt(peg$currPos) === 125) {
        s3 = peg$c10;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f88(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseChar() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$parseunescaped();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c24;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s1 !== peg$FAILED) {
        s2 = input.charAt(peg$currPos);
        if (peg$r1.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 98) {
            s3 = peg$c25;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e40); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$f89();
          }
          s2 = s3;
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 102) {
              s3 = peg$c26;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e41); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$f90();
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 110) {
                s3 = peg$c27;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e42); }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$f91();
              }
              s2 = s3;
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 114) {
                  s3 = peg$c28;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e43); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$f92();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 116) {
                    s3 = peg$c29;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e44); }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$f93();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 117) {
                      s3 = peg$c30;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e45); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$currPos;
                      s5 = peg$currPos;
                      s6 = peg$parseHexDigit();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseHexDigit();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseHexDigit();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseHexDigit();
                            if (s9 !== peg$FAILED) {
                              s6 = [s6, s7, s8, s9];
                              s5 = s6;
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                      if (s5 !== peg$FAILED) {
                        s4 = input.substring(s4, peg$currPos);
                      } else {
                        s4 = s5;
                      }
                      if (s4 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s2 = peg$f94(s4);
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f95(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseunescaped() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r2.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }

    return s0;
  }

  function peg$parseBoolean() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseTrueKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f96();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseFalseKw();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f97();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseNil() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseNilKw();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f98(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumber() {
    var s0;

    s0 = peg$parseHexNumber();
    if (s0 === peg$FAILED) {
      s0 = peg$parseBinNumber();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOctNumber();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFractionNumber();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIntegerNumber();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFloatNumber();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseOctNumber() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 48) {
      s2 = peg$c31;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r3.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r3.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e48); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = input.substring(s3, peg$currPos);
      } else {
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f99(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBinNumber() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c32) {
      s2 = peg$c32;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r4.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r4.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = input.substring(s3, peg$currPos);
      } else {
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f100(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHexNumber() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c33) {
      s2 = peg$c33;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parseHexDigit();
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseHexDigit();
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = input.substring(s3, peg$currPos);
      } else {
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f101(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFractionNumber() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    s3 = peg$currPos;
    s4 = input.charAt(peg$currPos);
    if (peg$r5.test(s4)) {
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    s5 = peg$parseDigitSequence();
    if (s5 !== peg$FAILED) {
      s4 = [s4, s5];
      s3 = s4;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s2 = input.substring(s2, peg$currPos);
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s3 = peg$c34;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e53); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parseDigitSequence();
        if (s5 !== peg$FAILED) {
          s4 = input.substring(s4, peg$currPos);
        } else {
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f102(s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIntegerNumber() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    s3 = peg$currPos;
    s4 = input.charAt(peg$currPos);
    if (peg$r5.test(s4)) {
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    s5 = peg$parseDigitSequence();
    if (s5 !== peg$FAILED) {
      s4 = [s4, s5];
      s3 = s4;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s2 = input.substring(s2, peg$currPos);
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f103(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFloatNumber() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    s3 = peg$currPos;
    s4 = input.charAt(peg$currPos);
    if (peg$r5.test(s4)) {
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    s5 = peg$parseDigitSequence();
    if (s5 !== peg$FAILED) {
      s6 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s7 = peg$c16;
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
      if (s7 !== peg$FAILED) {
        s8 = [];
        s9 = input.charAt(peg$currPos);
        if (peg$r6.test(s9)) {
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
        if (s9 !== peg$FAILED) {
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = input.charAt(peg$currPos);
            if (peg$r6.test(s9)) {
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e54); }
            }
          }
        } else {
          s8 = peg$FAILED;
        }
        if (s8 !== peg$FAILED) {
          s7 = [s7, s8];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s7 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 101) {
        s8 = peg$c35;
        peg$currPos++;
      } else {
        s8 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
      if (s8 !== peg$FAILED) {
        s9 = input.charAt(peg$currPos);
        if (peg$r5.test(s9)) {
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e52); }
        }
        if (s9 === peg$FAILED) {
          s9 = null;
        }
        s10 = [];
        s11 = input.charAt(peg$currPos);
        if (peg$r6.test(s11)) {
          peg$currPos++;
        } else {
          s11 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
        if (s11 !== peg$FAILED) {
          while (s11 !== peg$FAILED) {
            s10.push(s11);
            s11 = input.charAt(peg$currPos);
            if (peg$r6.test(s11)) {
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e54); }
            }
          }
        } else {
          s10 = peg$FAILED;
        }
        if (s10 !== peg$FAILED) {
          s8 = [s8, s9, s10];
          s7 = s8;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
      } else {
        peg$currPos = s7;
        s7 = peg$FAILED;
      }
      if (s7 === peg$FAILED) {
        s7 = null;
      }
      s4 = [s4, s5, s6, s7];
      s3 = s4;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s2 = input.substring(s2, peg$currPos);
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f104(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifier() {
    var s0;

    s0 = peg$parseCompositeIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSimpleIdentifier();
    }

    return s0;
  }

  function peg$parseSimpleIdentifier() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseIdent();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f105(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCompositeIdentifier() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseIdent();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s5 = peg$c16;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseIdent();
        if (s6 !== peg$FAILED) {
          s4 = s6;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c16;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e30); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseIdent();
            if (s6 !== peg$FAILED) {
              s4 = s6;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f106(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdent() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parseNonControl();
    if (s3 === peg$FAILED) {
      s3 = peg$parseControl();
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$parseNonControl();
      if (s5 === peg$FAILED) {
        s5 = peg$parseControl();
        if (s5 === peg$FAILED) {
          s5 = peg$parseDigit();
        }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseNonControl();
        if (s5 === peg$FAILED) {
          s5 = peg$parseControl();
          if (s5 === peg$FAILED) {
            s5 = peg$parseDigit();
          }
        }
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f107(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseComment() {
    var s0;

    s0 = peg$parseControlComment();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSimpleComment();
    }

    return s0;
  }

  function peg$parseSimpleComment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 59) {
      s2 = peg$c36;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parseANY();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseANY();
      }
      s3 = input.substring(s3, peg$currPos);
      peg$savedPos = s0;
      s0 = peg$f108(s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseControlComment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c37) {
      s2 = peg$c37;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseWS();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseWS();
      }
      s4 = peg$currPos;
      s5 = input.charAt(peg$currPos);
      if (peg$r5.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
      if (s5 !== peg$FAILED) {
        s6 = [];
        s7 = peg$parseWS();
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$parseWS();
        }
        s7 = peg$parseControlCommentCommandKw();
        if (s7 !== peg$FAILED) {
          s8 = [];
          s9 = peg$currPos;
          s10 = [];
          s11 = peg$parseWS();
          if (s11 !== peg$FAILED) {
            while (s11 !== peg$FAILED) {
              s10.push(s11);
              s11 = peg$parseWS();
            }
          } else {
            s10 = peg$FAILED;
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parseID();
            if (s11 !== peg$FAILED) {
              s9 = s11;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 !== peg$FAILED) {
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$currPos;
              s10 = [];
              s11 = peg$parseWS();
              if (s11 !== peg$FAILED) {
                while (s11 !== peg$FAILED) {
                  s10.push(s11);
                  s11 = peg$parseWS();
                }
              } else {
                s10 = peg$FAILED;
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parseID();
                if (s11 !== peg$FAILED) {
                  s9 = s11;
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            }
          } else {
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parseWS();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parseWS();
            }
            peg$savedPos = s4;
            s4 = peg$f109(s5, s7, s8);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseEOL();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f110(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseID() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r7.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r7.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e58); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseWS() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r8.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r9.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }

    return s0;
  }

  function peg$parseANY() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r10.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }

    return s0;
  }

  function peg$parseControlCommentCommandKw() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c38) {
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f111();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 4);
      if (s1.toLowerCase() === peg$c39) {
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e63); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f112();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c40) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f113();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c41) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e65); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f114();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 4);
            if (s1.toLowerCase() === peg$c42) {
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e66); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f115();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 3);
              if (s1.toLowerCase() === peg$c43) {
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e67); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f116();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 2);
                if (s1.toLowerCase() === peg$c44) {
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e68); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f117();
                }
                s0 = s1;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMatchKw() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c45) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }

    return s0;
  }

  function peg$parseWhileKw() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c46) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }

    return s0;
  }

  function peg$parseForKw() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c47) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }

    return s0;
  }

  function peg$parseCondKw() {
    var s0;

    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c48) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }

    return s0;
  }

  function peg$parseIfKw() {
    var s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c44) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }

    return s0;
  }

  function peg$parseWhenKw() {
    var s0;

    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c49) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }

    return s0;
  }

  function peg$parseFinallyKw() {
    var s0;

    s0 = input.substr(peg$currPos, 7);
    if (s0.toLowerCase() === peg$c21) {
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }

    return s0;
  }

  function peg$parseCatchKw() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c50) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }

    return s0;
  }

  function peg$parseTryKw() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c51) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }

    return s0;
  }

  function peg$parseAwaitKw() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c52) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }

    return s0;
  }

  function peg$parseAsyncKw() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c53) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }

    return s0;
  }

  function peg$parseDefInterfaceKw() {
    var s0;

    s0 = input.substr(peg$currPos, 12);
    if (s0.toLowerCase() === peg$c54) {
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }

    return s0;
  }

  function peg$parseDefClassKw() {
    var s0;

    s0 = input.substr(peg$currPos, 8);
    if (s0.toLowerCase() === peg$c55) {
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }

    return s0;
  }

  function peg$parseDefTypeKw() {
    var s0;

    s0 = input.substr(peg$currPos, 7);
    if (s0.toLowerCase() === peg$c56) {
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }

    return s0;
  }

  function peg$parseDefEnumKw() {
    var s0;

    s0 = input.substr(peg$currPos, 7);
    if (s0.toLowerCase() === peg$c57) {
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }

    return s0;
  }

  function peg$parseDefMacroKw() {
    var s0;

    s0 = input.substr(peg$currPos, 8);
    if (s0.toLowerCase() === peg$c58) {
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }

    return s0;
  }

  function peg$parseDefStructKw() {
    var s0;

    s0 = input.substr(peg$currPos, 9);
    if (s0.toLowerCase() === peg$c59) {
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }

    return s0;
  }

  function peg$parseDefTraitKw() {
    var s0;

    s0 = input.substr(peg$currPos, 8);
    if (s0.toLowerCase() === peg$c60) {
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }

    return s0;
  }

  function peg$parseFunctionKw() {
    var s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c61) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }

    return s0;
  }

  function peg$parseLetKw() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c62) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }

    return s0;
  }

  function peg$parseMutKw() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c63) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }

    return s0;
  }

  function peg$parseKeyOfKw() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c64) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }

    return s0;
  }

  function peg$parseImportKw() {
    var s0;

    s0 = input.substr(peg$currPos, 6);
    if (s0.toLowerCase() === peg$c65) {
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }

    return s0;
  }

  function peg$parseExportKw() {
    var s0;

    s0 = input.substr(peg$currPos, 6);
    if (s0.toLowerCase() === peg$c66) {
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }

    return s0;
  }

  function peg$parseFromKw() {
    var s0;

    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c67) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }

    return s0;
  }

  function peg$parseTrueKw() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c68) {
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseNonControl();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 2);
      if (s1.toLowerCase() === peg$c69) {
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e94); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseNonControl();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseFalseKw() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c70) {
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseNonControl();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 2);
      if (s1.toLowerCase() === peg$c71) {
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e96); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseNonControl();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSpreadKw() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c72) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }

    return s0;
  }

  function peg$parseImplementsModKw() {
    var s0;

    s0 = input.substr(peg$currPos, 11);
    if (s0.toLowerCase() === peg$c73) {
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }

    return s0;
  }

  function peg$parseExtendsModKw() {
    var s0;

    s0 = input.substr(peg$currPos, 8);
    if (s0.toLowerCase() === peg$c74) {
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }

    return s0;
  }

  function peg$parseWhereModKw() {
    var s0;

    s0 = input.substr(peg$currPos, 6);
    if (s0.toLowerCase() === peg$c75) {
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }

    return s0;
  }

  function peg$parseNilKw() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c76) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 4);
      if (s0.toLowerCase() === peg$c77) {
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e102); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.substr(peg$currPos, 4);
        if (s0.toLowerCase() === peg$c78) {
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e103); }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 4);
          if (s0.toLowerCase() === peg$c79) {
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e104); }
          }
          if (s0 === peg$FAILED) {
            s0 = input.substr(peg$currPos, 9);
            if (s0.toLowerCase() === peg$c80) {
              peg$currPos += 9;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e105); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseConstraintKw() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 10);
    if (s1.toLowerCase() === peg$c81) {
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s1 === peg$FAILED) {
      s1 = input.substr(peg$currPos, 8);
      if (s1.toLowerCase() === peg$c82) {
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e107); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.substr(peg$currPos, 2);
        if (s1.toLowerCase() === peg$c83) {
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e108); }
        }
        if (s1 === peg$FAILED) {
          s1 = input.substr(peg$currPos, 3);
          if (s1.toLowerCase() === peg$c84) {
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e109); }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f118();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIsModKw() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c85) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }

    return s0;
  }

  function peg$parseAsModKw() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c86) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }

    return s0;
  }

  function peg$parseOfModKw() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c87) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }

    return s0;
  }

  function peg$parseCondModKw() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c88) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }

    return s0;
  }

  function peg$parseThenModKw() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c89) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }

    return s0;
  }

  function peg$parseElseModKw() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c90) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }

    return s0;
  }

  function peg$parseInitModKw() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c91) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }

    return s0;
  }

  function peg$parseStepModKw() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c92) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }

    return s0;
  }

  function peg$parseEachModKw() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c93) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }

    return s0;
  }

  function peg$parseFromModKw() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c94) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }

    return s0;
  }

  function peg$parseLeftArrowKw() {
    var s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c95) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }

    return s0;
  }

  function peg$parseRightArrowKw() {
    var s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c96) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e121); }
    }

    return s0;
  }

  function peg$parseLeftDoubleArrowKw() {
    var s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c97) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }

    return s0;
  }

  function peg$parseRightDoubleArrowKw() {
    var s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c98) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }

    return s0;
  }

  function peg$parseAssignmentOperatorKw() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (s0.toLowerCase() === peg$c99) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }

    return s0;
  }

  function peg$parseModifierKw() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c100) {
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }
    if (s1 === peg$FAILED) {
      s1 = input.substr(peg$currPos, 7);
      if (s1.toLowerCase() === peg$c101) {
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s1 === peg$FAILED) {
        s1 = input.substr(peg$currPos, 6);
        if (s1.toLowerCase() === peg$c102) {
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e127); }
        }
        if (s1 === peg$FAILED) {
          s1 = input.substr(peg$currPos, 8);
          if (s1.toLowerCase() === peg$c103) {
            peg$currPos += 8;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e128); }
          }
          if (s1 === peg$FAILED) {
            s1 = input.substr(peg$currPos, 6);
            if (s1.toLowerCase() === peg$c104) {
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e129); }
            }
            if (s1 === peg$FAILED) {
              s1 = input.substr(peg$currPos, 8);
              if (s1.toLowerCase() === peg$c105) {
                peg$currPos += 8;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e130); }
              }
              if (s1 === peg$FAILED) {
                s1 = input.substr(peg$currPos, 13);
                if (s1.toLowerCase() === peg$c106) {
                  peg$currPos += 13;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e131); }
                }
                if (s1 === peg$FAILED) {
                  s1 = input.substr(peg$currPos, 13);
                  if (s1.toLowerCase() === peg$c107) {
                    peg$currPos += 13;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e132); }
                  }
                  if (s1 === peg$FAILED) {
                    s1 = input.substr(peg$currPos, 9);
                    if (s1.toLowerCase() === peg$c108) {
                      peg$currPos += 9;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e133); }
                    }
                    if (s1 === peg$FAILED) {
                      s1 = input.substr(peg$currPos, 8);
                      if (s1.toLowerCase() === peg$c109) {
                        peg$currPos += 8;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e134); }
                      }
                      if (s1 === peg$FAILED) {
                        s1 = input.substr(peg$currPos, 2);
                        if (s1.toLowerCase() === peg$c19) {
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e135); }
                        }
                        if (s1 === peg$FAILED) {
                          s1 = input.substr(peg$currPos, 3);
                          if (s1.toLowerCase() === peg$c20) {
                            peg$currPos += 3;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e136); }
                          }
                          if (s1 === peg$FAILED) {
                            s1 = input.substr(peg$currPos, 3);
                            if (s1.toLowerCase() === peg$c110) {
                              peg$currPos += 3;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e137); }
                            }
                            if (s1 === peg$FAILED) {
                              s1 = input.substr(peg$currPos, 8);
                              if (s1.toLowerCase() === peg$c111) {
                                peg$currPos += 8;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e138); }
                              }
                              if (s1 === peg$FAILED) {
                                s1 = input.substr(peg$currPos, 8);
                                if (s1.toLowerCase() === peg$c112) {
                                  peg$currPos += 8;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e139); }
                                }
                                if (s1 === peg$FAILED) {
                                  s1 = input.substr(peg$currPos, 4);
                                  if (s1.toLowerCase() === peg$c113) {
                                    peg$currPos += 4;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e140); }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f119();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseControl() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r11.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e142); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e141); }
    }

    return s0;
  }

  function peg$parseNonControl() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r12.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e144); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e143); }
    }

    return s0;
  }

  function peg$parseAlpha() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r13.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e146); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e145); }
    }

    return s0;
  }

  function peg$parseHexDigit() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r14.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e148); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e147); }
    }

    return s0;
  }

  function peg$parseDigitSequence() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r15.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.charAt(peg$currPos);
      if (peg$r16.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e151); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = input.charAt(peg$currPos);
        if (peg$r6.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r6.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e54); }
          }
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e149); }
    }

    return s0;
  }

  function peg$parseDigit() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r6.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e152); }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r17.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e154); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r17.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e154); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e153); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r17.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e154); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r17.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e154); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e153); }

    return s0;
  }

  function peg$parseEOF() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e155); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


  function makeNode(type, rest) {
    return {
      _type: type,
      _location: location(),
      ...(rest ?? {}),
    }
  }

  function foldStringFormat(items) {
    return items.reduce((acc, item) => {
        if (typeof item === 'string') {
          if (typeof acc[acc.length - 1] === 'string') {
            acc[acc.length - 1] += item;
          } else {
            acc.push(item);
          }
        } else {
          acc.push(item);
        }
        return acc;
      }, [])
      .map(x => typeof x !== 'string' ? x : makeNode("string", { value: x }));
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  StartRules: ["Program"],
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
